{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Components/Train.svelte",
    "../src/Components/Selection.svelte",
    "../src/Components/Header.svelte",
    "../src/Components/Timer.svelte",
    "../src/Components/Settings.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import * as R from 'ramda';\n\n  import Header from './Header.svelte';\n  import Timer from './Timer.svelte';\n  import { algGroup, algInfo } from '../scripts/algsinfo';\n  import { megaPllMap } from '../scripts/algsmap';\n  import { drawMegaminxLL } from '../scripts/minx-ll';\n\n  const dispatch = createEventDispatcher();\n  const changeMode = (event, unload = false) =>\n    dispatch('viewUpdate', {\n      unload,\n      mode: R.path(['detail', 'mode'], event),\n      selectedCases: selectedCases,\n    });\n\n  export let selectedCases;\n  export let value;\n\n  $: scrambleSize = R.nth(1, value) || 30;\n  $: colorScheme = R.mergeWith(R.or, R.nth(2, value), {\n    U: 'Black',\n    R: 'Grey',\n    F: 'Yellow',\n    L: 'Orange',\n    Bl: 'LightBlue',\n    Br: 'Green',\n  });\n\n  const getImage = (cs, state) =>\n    drawMegaminxLL(cs, state || R.repeat(0, 27), 80);\n\n  let currentCase;\n  let times = [];\n  const auf = ['', 'U', 'U2', \"U'\", \"U2'\"];\n  const randomItem = array =>\n    R.path([Math.floor(Math.random() * array.length)], array);\n\n  const updateTimesArray = time =>\n    R.prepend(\n      {\n        time,\n        scramble,\n        caseName: R.path([currentCase, 'name'], algInfo),\n        caseIndex: currentCase,\n      },\n      times\n    );\n\n  const getScramble = () =>\n    R.join(' ', [\n      randomItem(auf),\n      randomItem(\n        R.path([(currentCase = randomItem(selectedCases))], megaPllMap)\n      ),\n      randomItem(auf),\n    ]);\n\n  const removeCase = () => {\n    selectedCases = R.without([R.path([0, 'caseIndex'], times)], selectedCases);\n    if (R.equals(0, R.length(selectedCases))) {\n      changeMode({ detail: { mode: 0 } });\n    } else {\n      scramble = getScramble();\n    }\n  };\n\n  let scramble = getScramble();\n</script>\n\n<style>\n  .scramble {\n    font-size: 40px;\n    text-align: center;\n  }\n\n  table {\n    width: 100%;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n  td {\n    cursor: pointer;\n    border-radius: 5px;\n    border-spacing: 100px;\n    text-align: center;\n  }\n  .timer {\n    text-align: center;\n  }\n  .mn {\n    margin-top: 50px;\n  }\n\n  .last-case {\n    border: black 1px solid;\n  }\n</style>\n\n<svelte:window on:unload={() => changeMode({ detail: { mode: 0 } }, true)} />\n\n<Header train={false} selection={true} on:viewUpdate={changeMode} bind:value />\n\n<div class=\"mn\">\n  <div class=\"scramble\" style=\"font-size:{scrambleSize}px\">{scramble}</div>\n\n  <Timer\n    on:newTime={event => {\n      times = updateTimesArray(R.path(['detail', 'time'], event));\n      scramble = getScramble();\n    }}\n    bind:value />\n\n  <div>Selected Cases : {R.length(selectedCases)}</div>\n  {#each selectedCases as caseIndex}\n    <div>{R.path([caseIndex, 'name'], algInfo)}</div>\n  {/each}\n  {#if R.length(times)}\n    <div on:click={removeCase}>\n      Unselect last case : ({R.path([0, 'caseName'], times)})\n    </div>\n  {/if}\n  <br />\n  <br />\n  <br />\n  {#if R.length(times)}\n    <div class=\"last-case\">\n      <h4>Last case:</h4>\n      <div>{R.path([0, 'caseName'], times)}: {R.path([0, 'time'], times)}</div>\n      <div>{R.path([0, 'scramble'], times)}</div>\n      <div>\n        {@html getImage(colorScheme, R.path([R.path([0, 'caseIndex'], times), 'state'], algInfo))}\n      </div>\n    </div>\n  {/if}\n  <br />\n  <br />\n  <div class=\"times\">\n    {#each times as time}\n      {R.path(['caseName'], time)}: {R.path(['time'], time)}\n      <br />\n    {/each}\n  </div>\n</div>\n",
    "<script>\n  import { drawMegaminxLL } from '../scripts/minx-ll';\n  import * as R from 'ramda';\n  import { createEventDispatcher } from 'svelte';\n\n  import Header from './Header.svelte';\n  import { algGroup, algInfo } from '../scripts/algsinfo';\n\n  const dispatch = createEventDispatcher();\n\n  export let selectedCases;\n  export let value;\n\n  $: colorScheme = R.mergeWith(R.or, R.nth(2, value), {\n    U: 'Black',\n    R: 'Grey',\n    F: 'Yellow',\n    L: 'Orange',\n    Bl: 'LightBlue',\n    Br: 'Green',\n  });\n\n  const changeMode = (event, unload = false) =>\n    dispatch('viewUpdate', {\n      unload,\n      mode: R.path(['detail', 'mode'], event),\n      selectedCases: selectedCases,\n    });\n\n  const getImage = (cs, state) =>\n    drawMegaminxLL(cs, state || R.repeat(0, 27), 100);\n\n  const selectAllNone = () =>\n    R.equals(0, R.length(selectedCases))\n      ? (selectedCases = R.range(0, R.length(algInfo)))\n      : (selectedCases = []);\n\n  const selectGroup = i => {\n    const groupCases = R.path([i, 'cases'], algGroup);\n\n    if (R.equals(R.difference(selectedCases, groupCases), selectedCases)) {\n      selectedCases = R.concat(groupCases, selectedCases);\n    } else {\n      selectedCases = R.without(groupCases, selectedCases);\n    }\n  };\n\n  const select = i =>\n    R.includes(i, selectedCases)\n      ? (selectedCases = R.without([i], selectedCases))\n      : (selectedCases = R.append(i, selectedCases));\n</script>\n\n<style>\n  div {\n    width: 100%;\n    text-align: center;\n  }\n  table {\n    width: 100%;\n    margin-top: 50px;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n  td {\n    cursor: pointer;\n    border-radius: 5px;\n    border-spacing: 100px;\n    text-align: center;\n  }\n  svg {\n    display: block;\n    max-height: 100%;\n    margin: auto;\n  }\n  th {\n    cursor: pointer;\n    border: 1px solid black;\n    border-radius: 5px;\n    border-spacing: 100px;\n    text-align: center;\n  }\n  img {\n    width: 70%;\n  }\n  .selected {\n    border: 1px solid black;\n  }\n  .notSelected {\n    border: 1px solid lightgrey;\n  }\n</style>\n\n<svelte:window on:unload={() => changeMode({ detail: { mode: 0 } }, true)} />\n\n<Header\n  train={R.length(selectedCases)}\n  selection={false}\n  on:viewUpdate={changeMode}\n  bind:value />\n\n<table>\n  <th colspan=\"8\" on:click={selectAllNone}>\n    All Cases: {R.length(algInfo)}, Selected: {R.length(selectedCases)}\n  </th>\n\n  {#each algGroup as { name, cases }, i}\n    <tr />\n    <th colspan=\"8\" on:click={() => selectGroup(i)}>{name}</th>\n    <tr />\n    {#each cases as index}\n      {#if R.includes(index, [8, 23, 34, 42, 53, 68, 76])}\n        <tr />\n      {/if}\n      <td\n        class={R.includes(index, selectedCases) ? 'selected' : 'notSelected'}\n        on:click={() => select(index)}>\n        {@html getImage(colorScheme, R.path([index, 'state'], algInfo))}\n        <br />\n        {R.path([index, 'name'], algInfo)}\n      </td>\n    {/each}\n  {/each}\n</table>\n",
    "<script>\n  import { createEventDispatcher, getContext } from 'svelte';\n  import { fly } from 'svelte/transition';\n  import Settings from './Settings.svelte';\n\n  export let train;\n  export let selection;\n  export let value;\n\n  export let closeButton = true;\n  export let closeOnEsc = true;\n  export let closeOnOuterClick = true;\n  export let styleBg = {};\n  export let styleWindow = {};\n  export let styleContent = {};\n\n  let background;\n  let wrap;\n\n  let settingsOpen = false;\n\n  const dispatch = createEventDispatcher();\n\n  const changeMode = mode => dispatch('viewUpdate', { mode });\n\n  const handleKeyup = ({ key }) => {\n    if (settingsOpen && key === 'Escape') {\n      settingsOpen = false;\n    }\n  };\n</script>\n\n<style>\n  * {\n    box-sizing: border-box;\n  }\n\n  .bg {\n    top: 0;\n    left: 0;\n    position: fixed;\n    z-index: 1000;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 100vw;\n    height: 100vh;\n    background: rgba(0, 0, 0, 0.66);\n  }\n\n  .window-wrap {\n    position: relative;\n    margin: 2rem;\n    max-height: 100%;\n  }\n\n  .window {\n    position: relative;\n    width: 40rem;\n    max-width: 100%;\n    max-height: 100%;\n    margin: 2rem auto;\n    color: black;\n    border-radius: 0.5rem;\n    background: white;\n  }\n\n  .content {\n    position: relative;\n    padding: 1rem;\n    max-height: calc(100vh - 4rem);\n    overflow: auto;\n  }\n\n  .close {\n    display: block;\n    box-sizing: border-box;\n    position: absolute;\n    z-index: 1000;\n    top: 1rem;\n    right: 1rem;\n    margin: 0;\n    padding: 0;\n    width: 1.5rem;\n    height: 1.5rem;\n    border: 0;\n    color: black;\n    border-radius: 1.5rem;\n    background: white;\n    box-shadow: 0 0 0 1px black;\n    transition: transform 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\n      background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);\n    -webkit-appearance: none;\n  }\n\n  .close:before,\n  .close:after {\n    content: '';\n    display: block;\n    box-sizing: border-box;\n    position: absolute;\n    top: 50%;\n    width: 1rem;\n    height: 1px;\n    background: black;\n    transform-origin: center;\n    transition: height 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\n      background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);\n  }\n\n  .close:before {\n    -webkit-transform: translate(0, -50%) rotate(45deg);\n    -moz-transform: translate(0, -50%) rotate(45deg);\n    transform: translate(0, -50%) rotate(45deg);\n    left: 0.25rem;\n  }\n\n  .close:after {\n    -webkit-transform: translate(0, -50%) rotate(-45deg);\n    -moz-transform: translate(0, -50%) rotate(-45deg);\n    transform: translate(0, -50%) rotate(-45deg);\n    left: 0.25rem;\n  }\n\n  .close:hover {\n    background: black;\n  }\n\n  .close:hover:before,\n  .close:hover:after {\n    height: 2px;\n    background: white;\n  }\n\n  .close:focus {\n    border-color: #3399ff;\n    box-shadow: 0 0 0 2px #3399ff;\n  }\n\n  .close:active {\n    transform: scale(0.9);\n  }\n\n  .close:hover,\n  .close:focus,\n  .close:active {\n    outline: none;\n  }\n\n  .main {\n    background-color: white;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    padding: 10px;\n    font-size: 200%;\n    font-weight: bold;\n    user-select: none;\n    -webkit-user-select: none;\n    overflow: auto;\n    height: 50px;\n  }\n\n  .title {\n    float: left;\n  }\n\n  .mode {\n    float: right;\n    padding-right: 10px;\n  }\n</style>\n\n<svelte:window on:keyup={handleKeyup} />\n\n<div class=\"main\">\n  <div class=\"title\">Megaminx PLL Trainer</div>\n  {#if train}\n    <div class=\"mode\" on:click={() => changeMode(1)}>Train</div>\n  {/if}\n  {#if selection}\n    <div class=\"mode\" on:click={() => changeMode(0)}>Selection</div>\n  {/if}\n  <div class=\"mode\" on:click={() => (settingsOpen = true)}>Settings</div>\n</div>\n<div>\n  {#if settingsOpen}\n    <div\n      class=\"bg\"\n      bind:this={background}\n      on:click={event => (event.target === background || event.target === wrap ? (settingsOpen = false) : '')}>\n      <div class=\"window-wrap\" bind:this={wrap}>\n        <div class=\"window\">\n          {#if false}\n            <button on:click={() => (settingsOpen = false)} class=\"close\" />\n          {/if}\n          <div class=\"content\">\n            <Settings bind:value />\n          </div>\n        </div>\n      </div>\n    </div>\n  {/if}\n  <slot />\n</div>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import dayjs from 'dayjs';\n  import * as R from 'ramda';\n\n  const dispatch = createEventDispatcher();\n  const updateTimesArray = () => dispatch('newTime', { time: timerText });\n\n  export let value;\n\n  $: timerSize = R.nth(0, value) || 50;\n\n  let startTime;\n  let timeout;\n  let allowed = true;\n  let green = false;\n  let red = false;\n  let running = false;\n  let timerColor = 'black';\n  let timerText = 'Ready';\n  let waiting = false;\n\n  const msToTime = t => {\n    const time = Number(t);\n\n    const min = Math.floor(time / (60 * 1000));\n    let s = ((time - min * 60 * 1000) / 1000).toFixed(2);\n    if (min > 0 && s.length === 4) {\n      s = '0' + s;\n    }\n\n    return `${min ? min + ':' : ''}${s}`;\n  };\n\n  const displayTime = () => (timerText = msToTime(dayjs().diff(startTime)));\n\n  const startTimer = () => {\n    running = true;\n    timeout = setInterval(displayTime, 10);\n    startTime = dayjs();\n    green = false;\n  };\n\n  const stopTimer = () => {\n    running = false;\n    waiting = true;\n    red = true;\n    clearTimeout(timeout);\n\n    timerText = msToTime(dayjs().diff(startTime));\n    updateTimesArray();\n  };\n\n  const timerSetReady = () => {\n    waiting = false;\n    timerText = '0.00';\n    green = true;\n  };\n\n  const timerAfterStop = () => {\n    red = false;\n  };\n\n  const down = event => {\n    if (!allowed) {\n      return;\n    }\n    if (running) {\n      stopTimer();\n    } else if (event.code === 'Space') {\n      timerSetReady();\n    }\n    allowed = false;\n  };\n\n  const up = event => {\n    if (!running && !waiting && event.code === 'Space') {\n      startTimer();\n    } else {\n      timerAfterStop();\n    }\n    allowed = true;\n  };\n</script>\n\n<style>\n  div {\n    text-align: center;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n\n  .red {\n    color: red;\n  }\n\n  .green {\n    color: green;\n  }\n</style>\n\n<svelte:window on:keydown={down} on:keyup={up} />\n\n<div\n  class:green\n  class:red\n  on:touchstart={() => down({ code: 'Space' })}\n  on:touchend={() => up({ code: 'Space' })}\n  style=\"font-size:{timerSize}px\">\n  {timerText}\n</div>\n",
    "<script>\n  export let value;\n\n  const defaultValue = [\n    50,\n    30,\n    {\n      U: 'Black',\n      R: 'Grey',\n      F: 'Yellow',\n      L: 'Orange',\n      Bl: 'LightBlue',\n      Br: 'Green',\n    },\n  ];\n  const names = ['Timer size', 'Scramble size', 'Color Scheme'];\n\n  const reset = i => (value[i] = defaultValue[i]);\n</script>\n\n<style>\n  .one-line {\n    display: flex;\n    align-items: center;\n    justify-content: left;\n  }\n  .one-line * {\n    margin: 10px;\n  }\n  .multi-line {\n    align-items: center;\n    justify-content: left;\n    display: flex;\n    flex-wrap: wrap;\n  }\n</style>\n\n{#each value as val, i}\n  {#if names[i] === 'Color Scheme'}\n    {#each [val] as { U, R, F, L, Bl, Br }}\n      <div>\n        <div class=\"one-line\">\n          {names[i]}:\n          <!-- TODO: Color scheme can only reset once, find why -->\n          <button on:click={() => reset(i)}>Reset</button>\n        </div>\n        <div class=\"multi-line\">\n          <div class=\"one-line\">\n            U:\n            <input bind:value={U} />\n          </div>\n\n          <div class=\"one-line\">\n            F:\n            <input bind:value={F} />\n          </div>\n          <div class=\"one-line\">\n            R:\n            <input bind:value={R} />\n          </div>\n          <div class=\"one-line\">\n            L:\n            <input bind:value={L} />\n          </div>\n          <div class=\"one-line\">\n            Br:\n            <input bind:value={Br} />\n          </div>\n          <div class=\"one-line\">\n            Bl:\n            <input bind:value={Bl} />\n          </div>\n\n        </div>\n      </div>\n    {/each}\n  {:else}\n    <div class=\"one-line\">\n      {names[i]}:\n      <input type=\"number\" min=\"0\" bind:value={val} />\n      <button on:click={() => reset(i)}>Reset</button>\n    </div>\n  {/if}\n{/each}\n"
  ],
  "names": [],
  "mappings": "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"
}